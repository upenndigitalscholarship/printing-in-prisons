{% extends "base.njk" %}

{% block content %}

<h1 class="title-centered" data-pagefind-meta="title">{{ title }}</h1>
<div class="element-centered widest item-container" data-pagefind-body>
<div class="medium item-metadata">
<ul class="metadata-list">
  <li class="list-item"><b>Author: </b><span data-pagefind-filter="author">{{author}}</span></li>
  <li class="list-item"><b>Editor: </b><span data-pagefind-filter="editor">{{editor}}</span></li>
  <li class="list-item"><b>Newspaper: </b><span data-pagefind-filter="newspaper">{{newspaper}}</span> volume {{volume}}</li>

  <li class="list-item"><b>Page Number: </b>{{pageNum}}</li>
  <li class="list-item"><b>Date: </b>{{month}} {{day}} {{year}}</li>

  <li class="list-item"><b>Tags: </b>
    <div class="tags-container">
    {% for tag in tags %}
      <div class="tag-line">
        <a href="/search/?tag={{ tag }}" class="tag-link" data-pagefind-filter="tags">{{ tag }}</a>
      </div>
    {% endfor %}
    </div>
  </li>
</ul>
{{ content | safe }}
</div>
<div class = "medium image-zoom-container">
<img width="100%" src="{{ '/assets/img/' | url }}{{ image }}" class="zoomable-image"/>
</div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const zoomContainer = document.querySelector('.image-zoom-container');
  const zoomableImage = document.querySelector('.zoomable-image');

  if (zoomContainer && zoomableImage) {
    const handleMouseMove = (e) => {
      const rect = zoomContainer.getBoundingClientRect();
      // Calculate mouse position relative to the container
      const x = ((e.clientX - rect.left) / rect.width) * 100;
      const y = ((e.clientY - rect.top) / rect.height) * 100;

      // Update the transform-origin of the image
      zoomableImage.style.transformOrigin = `${x}% ${y}%`;
    };

    zoomContainer.addEventListener('click', () => {
      zoomContainer.classList.toggle('active');

      if (zoomContainer.classList.contains('active')) {
        // Add mousemove listener when zoomed in
        zoomContainer.addEventListener('mousemove', handleMouseMove);
      } else {
        // Remove listener and reset origin when zoomed out
        zoomContainer.removeEventListener('mousemove', handleMouseMove);
        zoomableImage.style.transformOrigin = 'center center'; // Reset to default
      }
    });
  }
});
</script>

<style>
.tags-container {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  margin-top: 0.5rem;
}

.tag-line {
  margin-bottom: 0.25rem;
}

.tag-link {
  display: inline-block;
  padding: 0 0.5rem;
  background-color: #f5f5f7;
  border-radius: 4px;
  text-decoration: none;
  color: #333;
  transition: all 0.2s ease;
}

.tag-link:hover {
  background-color: #e5e5e7;
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}
</style>

{% endblock %}