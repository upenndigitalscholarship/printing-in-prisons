{% extends "base.njk" %}

{% block content %}

<h1 class="title-centered">{{ title }}</h1>
<div class="element-centered widest item-container">
<div class="medium item-metadata">
<ul class="metadata-list">
  <li class="list-item"><b>Author: </b>{{author}}</li>
  <li class="list-item"><b>Editor: </b>{{editor}}</li>
  <li class="list-item"><b>Newspaper: </b>{{newspaper}} volume {{volume}}</li>

  <li class="list-item"><b>Page Number: </b>{{pageNum}}</li>
  <li class="list-item"><b>Date: </b>{{month}} {{day}} {{year}}</li>
  <li class="list-item"><b>Tags: </b>
{% for tag in tags %}
  <li class="list-item">{{ tag }} </li>
{% endfor %}
</li>
</ul>
{{ content | safe }}
</div>
<div class = "medium image-zoom-container">
<img width="100%" src="{{ '/assets/img/' | url }}{{ image }}" class="zoomable-image"/>
</div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const zoomContainer = document.querySelector('.image-zoom-container');
  const zoomableImage = document.querySelector('.zoomable-image');

  if (zoomContainer && zoomableImage) {
    const handleMouseMove = (e) => {
      const rect = zoomContainer.getBoundingClientRect();
      // Calculate mouse position relative to the container
      const x = ((e.clientX - rect.left) / rect.width) * 100;
      const y = ((e.clientY - rect.top) / rect.height) * 100;

      // Update the transform-origin of the image
      zoomableImage.style.transformOrigin = `${x}% ${y}%`;
    };

    zoomContainer.addEventListener('click', () => {
      zoomContainer.classList.toggle('active');

      if (zoomContainer.classList.contains('active')) {
        // Add mousemove listener when zoomed in
        zoomContainer.addEventListener('mousemove', handleMouseMove);
      } else {
        // Remove listener and reset origin when zoomed out
        zoomContainer.removeEventListener('mousemove', handleMouseMove);
        zoomableImage.style.transformOrigin = 'center center'; // Reset to default
      }
    });
  }
});
</script>

{% endblock %}